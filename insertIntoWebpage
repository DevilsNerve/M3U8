function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function downloadAndConcatTSFiles(m3u8Url, outputFileName = 'downloaded.mp4') {
    try {
        const masterPlaylistResponse = await fetch(m3u8Url);
        const masterPlaylistText = await masterPlaylistResponse.text();

        // Attempt to match any resolution playlist
        const resolutionM3u8Match = masterPlaylistText.match(/(index_\d+p\.m3u8|chunklist_.+\.m3u8|.+\.m3u8)/);
        if (!resolutionM3u8Match) {
            console.error("No matching resolution playlist found.");
            return;
        }

        const resolutionM3u8Url = new URL(resolutionM3u8Match[0], m3u8Url).href;
        const playlistResponse = await fetch(resolutionM3u8Url);
        const playlistText = await playlistResponse.text();

        const tsFiles = playlistText.split('\n').map(line => line.trim()).filter(line => line && !line.startsWith('#') && line.endsWith('.ts'));
        if (!tsFiles.length) {
            console.error("No TS files found in the playlist.");
            return;
        }

        console.log("TS Files:", tsFiles);

        const videoBuffers = [];
        for (const file of tsFiles) {
            const tsResponse = await fetch(new URL(file, resolutionM3u8Url).href);
            videoBuffers.push(await tsResponse.arrayBuffer());

            // Handle rate limiting by adding a delay between requests
            await sleep(1000);
        }

        const totalLength = videoBuffers.reduce((acc, buffer) => acc + buffer.byteLength, 0);
        const combinedBuffer = new Uint8Array(totalLength);
        let offset = 0;
        videoBuffers.forEach((buffer) => {
            combinedBuffer.set(new Uint8Array(buffer), offset);
            offset += buffer.byteLength;
        });

        const blob = new Blob([combinedBuffer], { type: 'video/mp4' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = outputFileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        console.log("Download complete!");
    } catch (error) {
        console.error("An error occurred:", error);
    }
}

async function findAndProcessM3u8() {
    const pageContent = document.documentElement.outerHTML;
    const m3u8Match = pageContent.match(/https?:\/\/[^\s"']+\.m3u8/);
    if (m3u8Match) {
        console.log("Detected m3u8 URL:", m3u8Match[0]);
        await downloadAndConcatTSFiles(m3u8Match[0]);
    } else {
        console.error("No m3u8 URL found on this page.");
    }
}

findAndProcessM3u8();

